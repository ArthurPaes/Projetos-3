(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react'), require('react-dom')) :
  typeof define === 'function' && define.amd ? define(['react', 'react-dom'], factory) :
  (global = global || self, global['react-handwriting-keyboard'] = factory(global.React, global.ReactDOM));
}(this, (function (React, ReactDOM) { 'use strict';

  React = React && React.hasOwnProperty('default') ? React['default'] : React;
  ReactDOM = ReactDOM && ReactDOM.hasOwnProperty('default') ? ReactDOM['default'] : ReactDOM;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var classnames = createCommonjsModule(function (module) {
  /*!
    Copyright (c) 2017 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  */
  /* global define */

  (function () {

  	var hasOwn = {}.hasOwnProperty;

  	function classNames () {
  		var classes = [];

  		for (var i = 0; i < arguments.length; i++) {
  			var arg = arguments[i];
  			if (!arg) continue;

  			var argType = typeof arg;

  			if (argType === 'string' || argType === 'number') {
  				classes.push(arg);
  			} else if (Array.isArray(arg) && arg.length) {
  				var inner = classNames.apply(null, arg);
  				if (inner) {
  					classes.push(inner);
  				}
  			} else if (argType === 'object') {
  				for (var key in arg) {
  					if (hasOwn.call(arg, key) && arg[key]) {
  						classes.push(key);
  					}
  				}
  			}
  		}

  		return classes.join(' ');
  	}

  	if ( module.exports) {
  		classNames.default = classNames;
  		module.exports = classNames;
  	} else {
  		window.classNames = classNames;
  	}
  }());
  });

  var Handwriting = /*#__PURE__*/function () {
    function Handwriting(canvas, lineWidth) {
      _classCallCheck(this, Handwriting);

      this.canvas = canvas;
      this.cxt = canvas.getContext('2d');
      this.cxt.lineCap = 'round';
      this.cxt.lineJoin = 'round';
      this.lineWidth = lineWidth || 3;
      this.width = canvas.width;
      this.height = canvas.height;
      this.drawing = false;
      this.handwritingX = [];
      this.handwritingY = [];
      this.trace = [];
      this.options = {};
      this.step = [];
      this.redo_step = [];
      this.redo_trace = [];
      this.allowUndo = false;
      this.allowRedo = false;
      this.timer = null;
      this.callback = null;
      this.canvas.addEventListener('mousedown', this.mouseDown.bind(this));
      this.canvas.addEventListener('mousemove', this.mouseMove.bind(this));
      this.canvas.addEventListener('mouseup', this.mouseUp.bind(this));
      this.canvas.addEventListener('touchstart', this.touchStart.bind(this));
      this.canvas.addEventListener('touchmove', this.touchMove.bind(this));
      this.canvas.addEventListener('touchend', this.touchEnd.bind(this));
    }
    /**
     * [toggle_Undo_Redo description]
     * @return {[type]} [description]
     */


    _createClass(Handwriting, [{
      key: "set_Undo_Redo",
      value: function set_Undo_Redo(undo, redo) {
        this.allowUndo = undo;
        this.allowRedo = undo ? redo : false;

        if (!this.allowUndo) {
          this.step = [];
          this.redo_step = [];
          this.redo_trace = [];
        }
      }
    }, {
      key: "setLineWidth",
      value: function setLineWidth(lineWidth) {
        this.lineWidth = lineWidth;
      }
    }, {
      key: "setCallBack",
      value: function setCallBack(callback) {
        this.callback = callback;
      }
    }, {
      key: "setOptions",
      value: function setOptions(options) {
        this.options = options;
      }
    }, {
      key: "mouseDown",
      value: function mouseDown(e) {
        // new stroke
        this.cxt.lineWidth = this.lineWidth;
        this.handwritingX = [];
        this.handwritingY = [];
        this.drawing = true;
        this.cxt.beginPath();
        var rect = this.canvas.getBoundingClientRect();
        var x = e.clientX - rect.left;
        var y = e.clientY - rect.top;
        this.cxt.moveTo(x, y);
        this.handwritingX.push(x);
        this.handwritingY.push(y); //清楚自动识别计时器

        if (this.timer) clearTimeout(this.timer);
      }
    }, {
      key: "mouseMove",
      value: function mouseMove(e) {
        if (this.drawing) {
          var rect = this.canvas.getBoundingClientRect();
          var x = e.clientX - rect.left;
          var y = e.clientY - rect.top;
          this.cxt.lineTo(x, y);
          this.cxt.stroke();
          this.handwritingX.push(x);
          this.handwritingY.push(y);
        }
      }
    }, {
      key: "mouseUp",
      value: function mouseUp() {
        var _this2 = this;

        var w = [];
        w.push(this.handwritingX);
        w.push(this.handwritingY);
        w.push([]);
        this.trace.push(w);
        this.drawing = false;
        if (this.allowUndo) this.step.push(this.toDataURL()); //启动自动识别计算器，500毫秒后自动识别

        this.timer = setTimeout(function () {
          _this2.recognize();
        }, 500);
      }
    }, {
      key: "touchStart",
      value: function touchStart(e) {
        e.preventDefault();
        this.cxt.lineWidth = this.lineWidth;
        this.handwritingX = [];
        this.handwritingY = [];
        var de = document.documentElement;
        var box = this.getBoundingClientRect();
        var top = box.top + window.pageYOffset - de.clientTop;
        var left = box.left + window.pageXOffset - de.clientLeft;
        var touch = e.changedTouches[0];
        var touchX = touch.pageX - left;
        var touchY = touch.pageY - top;
        this.handwritingX.push(touchX);
        this.handwritingY.push(touchY);
        this.cxt.beginPath();
        this.cxt.moveTo(touchX, touchY); //清楚自动识别计时器

        if (this.timer) clearTimeout(this.timer);
      }
    }, {
      key: "touchMove",
      value: function touchMove(e) {
        e.preventDefault();
        var touch = e.targetTouches[0];
        var de = document.documentElement;
        var box = this.getBoundingClientRect();
        var top = box.top + window.pageYOffset - de.clientTop;
        var left = box.left + window.pageXOffset - de.clientLeft;
        var x = touch.pageX - left;
        var y = touch.pageY - top;
        this.handwritingX.push(x);
        this.handwritingY.push(y);
        this.cxt.lineTo(x, y);
        this.cxt.stroke();
      }
    }, {
      key: "touchEnd",
      value: function touchEnd(e) {
        var _this3 = this;

        var w = [];
        w.push(this.handwritingX);
        w.push(this.handwritingY);
        w.push([]);
        this.trace.push(w);
        if (this.allowUndo) this.step.push(this.toDataURL()); //启动自动识别计算器，500毫秒后自动识别

        this.timer = setTimeout(function () {
          _this3.recognize();
        }, 500);
      }
    }, {
      key: "undo",
      value: function undo() {
        if (!this.allowUndo || this.step.length <= 0) return;else if (this.step.length === 1) {
          if (this.allowRedo) {
            this.redo_step.push(this.step.pop());
            this.redo_trace.push(this.trace.pop());
            this.cxt.clearRect(0, 0, this.width, this.height);
          }
        } else {
          if (this.allowRedo) {
            this.redo_step.push(this.step.pop());
            this.redo_trace.push(this.trace.pop());
          } else {
            this.step.pop();
            this.trace.pop();
          }

          this.loadFromUrl(this.step.slice(-1)[0]);
        }
      }
    }, {
      key: "redo",
      value: function redo() {
        if (!this.allowRedo || this.redo_step.length <= 0) return;
        this.step.push(this.redo_step.pop());
        this.trace.push(this.redo_trace.pop());
        this.loadFromUrl(this.step.slice(-1)[0]);
      }
    }, {
      key: "erase",
      value: function erase() {
        this.cxt.clearRect(0, 0, this.width, this.height);
        this.step = [];
        this.redo_step = [];
        this.redo_trace = [];
        this.trace = [];
      }
    }, {
      key: "loadFromUrl",
      value: function loadFromUrl(url) {
        var imageObj = new Image();

        imageObj.onload = function () {
          this.canvas.cxt.clearRect(0, 0, this.width, this.height);
          this.canvas.cxt.drawImage(imageObj, 0, 0);
        };

        imageObj.src = url;
      }
    }, {
      key: "recognize",
      value: function recognize() {
        var data = JSON.stringify({
          options: 'enable_pre_space',
          requests: [{
            writing_guide: {
              writing_area_width: this.options.width || this.width || undefined,
              writing_area_height: this.options.height || this.width || undefined
            },
            ink: this.trace,
            language: this.options.language || 'pt_BR'
          }]
        });

        var _this = this;

        var xhr = new XMLHttpRequest();
        xhr.addEventListener('readystatechange', function () {
          if (this.readyState === 4) {
            switch (this.status) {
              case 200:
                var response = JSON.parse(this.responseText);
                var results;

                if (response.length === 1) {
                  console.log(new Error(response[0]));
                } else {
                  //识别成功清除画板
                  _this.erase();

                  results = response[1][0][1];
                }

                if (!!_this.options.numOfWords) {
                  results = results.filter(function (result) {
                    return result.length === _this.options.numOfWords;
                  });
                }

                if (_this.options && !!_this.options.numOfReturn) {
                  results = results.slice(0, this.options.numOfReturn);
                }

                _this.callback(results, undefined);

                break;

              case 403:
                _this.callback(undefined, new Error('access denied'));

                break;

              case 503:
                _this.callback(undefined, new Error("can't connect to recognition server"));

                break;
            }
          }
        });
        xhr.open('POST', 'https://www.google.cn/inputtools/request?ime=handwriting&app=mobilesearch&cs=1&oe=UTF-8');
        xhr.setRequestHeader('content-type', 'application/json');
        xhr.send(data);
      }
    }]);

    return Handwriting;
  }();

  function styleInject(css, ref) {
    if ( ref === void 0 ) ref = {};
    var insertAt = ref.insertAt;

    if (!css || typeof document === 'undefined') { return; }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css = "@import '//at.alicdn.com/t/font_2025382_zp7gawrqpdc.css';\n.keyboard {\n  z-index: 100;\n  position: fixed;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  opacity: 0;\n  transition: 0.2s ease-in;\n  background-color: #eceff1;\n  transform: translate3d(0, 100%, 0);\n  box-shadow: 0 0 0 transparent, 0 -2px 20px #cecece;\n}\n.keyboard.show {\n  transform: translate3d(0, 0, 0);\n  opacity: 1;\n}\n.keyboard .keyboard-output {\n  position: relative;\n  width: 100%;\n  padding: 8px 12px;\n  background-color: #fbfcfc;\n}\n.keyboard .keyboard-output input {\n  height: 100%;\n  width: 100%;\n  padding: 10px;\n  font-size: 20px;\n  color: #8e729d;\n  background: #eceff1;\n  border: 1px solid #e0e3e5;\n  border-radius: 4px;\n  outline: none;\n}\n.keyboard .keyboard-output .icon-Emptied {\n  position: absolute;\n  top: 50%;\n  right: 24px;\n  font-size: 20px;\n  color: rgba(0, 0, 0, 0.4);\n  transform: translateY(-50%);\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n.keyboard .keyboard-output .icon-Emptied:hover {\n  color: rgba(255, 0, 0, 0.6);\n}\n.keyboard .keyboard-nav {\n  height: 50px;\n  text-align: center;\n  background-color: #fbfcfc;\n}\n.keyboard .keyboard-nav .nav-item {\n  display: inline-block;\n  width: 200px;\n  height: 44px;\n  margin-top: 6px;\n  line-height: 44px;\n  font-size: 18px;\n  color: #37474f;\n  cursor: pointer;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n.keyboard .keyboard-nav .nav-item.active {\n  background-color: #eceff1;\n  border-radius: 2px 2px 0 0;\n}\n.keyboard .keyboard-content {\n  padding: 14px 13px 10px;\n}\n.keyboard .keyboard-content .content-item {\n  display: none;\n  margin: 0;\n  padding: 0;\n}\n.keyboard .keyboard-content .content-item.active {\n  display: flex;\n  align-items: stretch;\n}\n.keyboard .keyboard-content .content-item.handwriting .handwriting-enter {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n}\n.keyboard .keyboard-content .content-item.handwriting .handwriting-enter .handwriting-options {\n  height: 65px;\n  margin: 0;\n  margin-bottom: 13px;\n  padding: 0 12px;\n  line-height: 65px;\n  background-color: #fff;\n  font-size: 24px;\n  color: #37474f;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n.keyboard .keyboard-content .content-item.handwriting .handwriting-enter .handwriting-options .options-word {\n  display: inline-block;\n  margin-right: 30px;\n}\n.keyboard .keyboard-content .content-item.handwriting .handwriting-enter .handwriting-options .options-holder {\n  font-size: 18px;\n  opacity: 0.3;\n}\n.keyboard .keyboard-content .content-item.handwriting .handwriting-enter .handwriting-drawboard {\n  height: 226px;\n  width: 100%;\n  background-color: #fff;\n}\n.keyboard .keyboard-content .content-item.handwriting .handwriting-action {\n  display: flex;\n  list-style: none;\n  flex-direction: column;\n  flex-basis: 170px;\n  margin: 0;\n  margin-left: 13px;\n}\n.keyboard .keyboard-content .content-item.handwriting .handwriting-action .action-item {\n  height: 65px;\n  width: 100%;\n  margin-bottom: 13px;\n  background: #e0e3e5;\n  border-radius: 2px;\n  line-height: 65px;\n  font-size: 18px;\n  color: #37474f;\n  text-align: center;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n.keyboard .keyboard-content .content-item.handwriting .handwriting-action .action-item:last-child {\n  height: 70px;\n  margin-bottom: 0;\n  margin-top: auto;\n  line-height: 70px;\n  color: #fff;\n  background-color:#f47215;\n  border: 1px solid #f47215;\n  border-radius: 2px;\n}\n.keyboard .keyboard-content .content-item.handwriting .handwriting-action .action-item:last-child:active {\n  background-image: linear-gradient(-180deg, #4b3185 0%, #4b3185 100%);\n}\n.keyboard .keyboard-content .content-item.handwriting .handwriting-action .action-item:active {\n  background-color: #fbfcfc;\n}\n.keyboard .keyboard-content .content-item.handwriting .handwriting-action .action-item .iconfont {\n  font-size: 32px;\n  color: #7b868b;\n}\n.keyboard .keyboard-content .content-item.letter {\n  flex-direction: column;\n}\n.keyboard .keyboard-content .content-item.letter .letter-line {\n  display: flex;\n  justify-content: flex-end;\n  width: 100%;\n  margin-bottom: 13px;\n}\n.keyboard .keyboard-content .content-item.letter .letter-line .letter-cell {\n  flex: 1 1 110px;\n  height: 65px;\n  margin-right: 13px;\n  line-height: 65px;\n  font-size: 30px;\n  color: #37474f;\n  text-align: center;\n  background-color: #fbfcfc;\n  border-radius: 2px;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n.keyboard .keyboard-content .content-item.letter .letter-line .letter-cell:last-child {\n  margin-right: 0;\n}\n.keyboard .keyboard-content .content-item.letter .letter-line .letter-cell.dusky {\n  background-color: #e0e3e5;\n}\n.keyboard .keyboard-content .content-item.letter .letter-line .letter-cell.dusky:active {\n  background-color: #fbfcfc;\n}\n.keyboard .keyboard-content .content-item.letter .letter-line .letter-cell.dusky .iconfont {\n  color: #7b868b;\n}\n.keyboard .keyboard-content .content-item.letter .letter-line .letter-cell.space {\n  flex: 6 1 725px;\n}\n.keyboard .keyboard-content .content-item.letter .letter-line .letter-cell.space .iconfont {\n  font-size: 48px;\n  color: #7b868b;\n}\n.keyboard .keyboard-content .content-item.letter .letter-line .letter-cell.confirm {\n  color: #fff;\n  font-size: 20px;\n  background-color:#f47215;\n  border: 1px solid #f47215;\n  border-radius: 2px;\n}\n.keyboard .keyboard-content .content-item.letter .letter-line .letter-cell.confirm:active {\n  background-image: linear-gradient(-180deg, #4b3185 0%, #4b3185 100%);\n}\n.keyboard .keyboard-content .content-item.letter .letter-line .letter-cell:active {\n  background-color: #e0e3e5;\n}\n.keyboard .keyboard-content .content-item.letter .letter-line .letter-cell .iconfont {\n  font-size: 32px;\n  color: #6b529e;\n}\n.keyboard .keyboard-content .content-item.letter .letter-line .letter-cell .iconfont.icon-uppercaseletter {\n  font-size: 28px;\n}\n.keyboard .keyboard-content .content-item.letter .letter-line:nth-child(2):before {\n  content: '';\n  flex-basis: 55px;\n  margin-right: 13px;\n}\n.keyboard .keyboard-content .content-item.letter .letter-line:nth-child(2) .letter-cell:last-child {\n  flex-basis: 170px;\n}\n.keyboard .keyboard-content .content-item.digital {\n  flex-direction: column;\n}\n.keyboard .keyboard-content .content-item.digital .digital-line {\n  display: flex;\n  justify-content: flex-end;\n  width: 100%;\n  margin-bottom: 13px;\n}\n.keyboard .keyboard-content .content-item.digital .digital-line .digital-cell {\n  flex-basis: 316px;\n  flex-grow: 1;\n  height: 65px;\n  margin-right: 13px;\n  line-height: 65px;\n  font-size: 30px;\n  color: #37474f;\n  text-align: center;\n  background-color: #fbfcfc;\n  border-radius: 2px;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n.keyboard .keyboard-content .content-item.digital .digital-line .digital-cell:first-child {\n  flex-basis: 170px;\n}\n.keyboard .keyboard-content .content-item.digital .digital-line .digital-cell:last-child {\n  flex-basis: 170px;\n  margin-right: 0;\n}\n.keyboard .keyboard-content .content-item.digital .digital-line .digital-cell.dusky {\n  background-color: #e0e3e5;\n}\n.keyboard .keyboard-content .content-item.digital .digital-line .digital-cell.dusky:active {\n  background-color: #fbfcfc;\n}\n.keyboard .keyboard-content .content-item.digital .digital-line .digital-cell.dusky .iconfont {\n  font-size: 32px;\n  color: #7b868b;\n}\n.keyboard .keyboard-content .content-item.digital .digital-line .digital-cell.dusky .iconfont.icon-space {\n  font-size: 48px;\n  transform: scale(0.5);\n}\n.keyboard .keyboard-content .content-item.digital .digital-line .digital-cell.confirm {\n  color: #fff;\n  font-size: 20px;\n  background-color:#f47215;\n  border: 1px solid #f47215;\n  border-radius: 2px;\n}\n.keyboard .keyboard-content .content-item.digital .digital-line .digital-cell.confirm:active {\n  background-image: linear-gradient(-180deg, #4b3185 0%, #4b3185 100%);\n}\n.keyboard .keyboard-content .content-item.digital .digital-line .digital-cell:active {\n  background-color: #e0e3e5;\n}\n";
  styleInject(css);

  var Keyboard = /*#__PURE__*/function (_React$Component) {
    _inherits(Keyboard, _React$Component);

    var _super = _createSuper(Keyboard);

    function Keyboard() {
      var _this2;

      _classCallCheck(this, Keyboard);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this2 = _super.call.apply(_super, [this].concat(args));
      _this2.state = {
        visible: false,
        cursorPos: _this2.props.target.value ? _this2.props.target.value.length : 0,
        value: _this2.props.target.value || '',
        keyboardType: 0,
        //键盘类型0手写， 1字母， 2数字
        characters: [],
        letters: [['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'icon-keyboard dusky'], ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'icon-delete dusky'], ['icon-uppercase dusky', 'z', 'x', 'c', 'v', 'b', 'n', 'm', '! dusky', '? dusky', '# dusky'], ['~ dusky', '/ dusky', 'icon-space space', '. dusky', ', dusky', 'Confirmar confirm']],
        upperCase: false
      };

      _this2.handleSwitchKeyBoard = function (index) {
        _this2.setState({
          keyboardType: index,
          characters: []
        });
      };

      _this2.handleSelectCharacters = function (event) {
        var value = _this2.state.value;
        var cursorPos = _this2.input.selectionEnd; //选中文本长度

        var selectionLen = cursorPos - _this2.input.selectionStart; //需要删除文本的开始位置

        var deleteStart = selectionLen === 0 ? cursorPos - 1 : _this2.input.selectionStart;
        var newValue = value.substr(0, deleteStart) + event.target.innerText + value.substr(cursorPos, value.length - 1); //需要更新的光标位置

        var newCursorPos = deleteStart + event.target.innerText.length;

        _this2.setState({
          value: newValue,
          cursorPos: newCursorPos,
          characters: []
        });
      };

      _this2.handlePressKey = function (key, e) {
        var _this2$props = _this2.props,
            onChange = _this2$props.onChange,
            onClose = _this2$props.onClose;
        var _this2$state = _this2.state,
            value = _this2$state.value,
            letters = _this2$state.letters,
            upperCase = _this2$state.upperCase;
        var cursorPos = _this2.input.selectionEnd;

        if (key.length > 1 && key.indexOf('icon') > -1) {
          //功能键
          var functionName = key.match(/-(\w+)/)[1];

          switch (functionName) {
            case 'keyboard':
              //收缩键盘
              e.stopPropagation();
              onClose && onClose();
              break;

            case 'delete':
              //回退键
              //选中文本长度
              var selectionLen = cursorPos - _this2.input.selectionStart; //需要删除文本的开始位置

              var deleteStart = selectionLen === 0 ? cursorPos - 1 : _this2.input.selectionStart; //需要更新的光标位置

              var newCursorPos = selectionLen === 0 ? cursorPos - 1 : cursorPos - selectionLen;

              if (cursorPos > 0) {
                var newValue = value.substr(0, deleteStart) + value.substr(cursorPos, value.length - 1);

                _this2.setState({
                  value: newValue,
                  cursorPos: newCursorPos,
                  characters: []
                });
              }

              break;

            case 'uppercase':
              //大小写切换
              var updateLetters = letters.map(function (line) {
                line = line.map(function (letter) {
                  if (letter.length === 1) {
                    //字母切换大小写
                    var fun = upperCase ? 'toLowerCase' : 'toUpperCase';
                    letter = letter[fun]();
                  } else if (letter.indexOf('uppercase') > -1) {
                    //shift键状态切换
                    var className = upperCase ? ' dusky' : '';
                    letter = letter.split(' ')[0] + className;
                  }

                  return letter;
                });
                return line;
              });

              _this2.setState({
                letters: updateLetters,
                upperCase: !upperCase
              });

              break;

            case 'space':
              //空格键
              _this2.setState({
                value: value.substr(0, cursorPos) + ' ' + value.substr(cursorPos, value.length - 1),
                cursorPos: cursorPos + 1
              });

              break;
          }
        } else if (key.indexOf('Confirmar') > -1) {
          //Confirmar键
          e.stopPropagation();
          onChange && onChange(value);
          onClose && onClose();
        } else if (key.indexOf('重写') > -1) {
          //重写键
          console.log('重写');
        } else {
          //字符键
          _this2.setState({
            value: value.substr(0, cursorPos) + key + value.substr(cursorPos, value.length - 1),
            cursorPos: cursorPos + 1
          });
        }
      };

      _this2.handleChange = function (e) {
        var cursorPos = _this2.input.selectionEnd;

        _this2.setState({
          value: e.target.value,
          cursorPos: cursorPos
        });
      };

      _this2.handleKeyboardClick = function () {
        _this2.input.focus();
      };

      _this2.clearValue = function () {
        //清空输入
        _this2.setState({
          value: '',
          characters: []
        });
      };

      return _this2;
    }

    _createClass(Keyboard, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this3 = this;

        //光标位置移到最后
        var len = this.state.value.length;
        this.input.focus();
        this.input.setSelectionRange(len, len); //设置手写输入

        var drawboardRect = this.drawboard.getBoundingClientRect();
        this.drawboard.height = drawboardRect.height;
        this.drawboard.width = drawboardRect.width;
        var handwriting = new Handwriting(this.drawboard);

        var _this = this; //Set callback function


        handwriting.setCallBack(function (data, err) {
          if (err) {
            throw err;
          } else if (data && data.length > 0) {
            var value = _this.state.value;
            var cursorPos = _this.input.selectionEnd;

            _this.setState({
              value: value.substr(0, cursorPos) + data[0] + value.substr(cursorPos, value.length - 1),
              cursorPos: cursorPos + data[0].length,
              characters: data
            });

            var start = cursorPos;
            var end = cursorPos + data[0].length;

            _this.input.setSelectionRange(start, end);
          }
        }); //显示键盘动画

        this.setState({
          visible: true
        }); //绑定键盘关闭事件到root

        setTimeout(function () {
          document.getElementById('root').addEventListener('click', _this3.props.onClose, false);
        }, 500);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        //输入框更新焦点位置
        var cursorPos = this.state.cursorPos;
        this.input.setSelectionRange(cursorPos, cursorPos);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        //解除绑定到root的键盘关闭事件
        document.getElementById('root').removeEventListener('click', this.props.onClose, false);
      } //切换

    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        var _this$state = this.state,
            visible = _this$state.visible,
            value = _this$state.value,
            autoFocus = _this$state.autoFocus,
            keyboardType = _this$state.keyboardType,
            characters = _this$state.characters,
            letters = _this$state.letters;
        return /*#__PURE__*/React.createElement("div", {
          className: classnames({
            keyboard: true,
            show: visible
          }),
          onClick: this.handleKeyboardClick
        }, /*#__PURE__*/React.createElement("header", {
          className: "keyboard-output"
        }, /*#__PURE__*/React.createElement("input", {
          type: "text",
          value: value,
          autoFocus: autoFocus,
          ref: function ref(input) {
            return _this4.input = input;
          },
          onChange: this.handleChange
        }), /*#__PURE__*/React.createElement("i", {
          className: "iconfont icon-Emptied",
          onClick: this.clearValue
        })), /*#__PURE__*/React.createElement("ul", {
          className: "keyboard-nav"
        }, ['手写', '字母', '数字'].map(function (item, index) {
          return /*#__PURE__*/React.createElement("li", {
            key: item,
            className: classnames({
              'nav-item': true,
              active: keyboardType === index
            }),
            onClick: _this4.handleSwitchKeyBoard.bind(_this4, index)
          }, item);
        })), /*#__PURE__*/React.createElement("section", {
          className: "keyboard-content"
        }, /*#__PURE__*/React.createElement("div", {
          className: classnames({
            'content-item': true,
            handwriting: true,
            active: keyboardType === 0
          })
        }, /*#__PURE__*/React.createElement("div", {
          className: "handwriting-enter"
        }, /*#__PURE__*/React.createElement("p", {
          className: "handwriting-options"
        }, characters.length === 0 ? /*#__PURE__*/React.createElement("span", {
          className: "options-holder"
        }, "\u5907\u9009\u5B57") : characters.map(function (char) {
          return /*#__PURE__*/React.createElement("span", {
            key: char,
            className: "options-word",
            onClick: _this4.handleSelectCharacters
          }, char);
        })), /*#__PURE__*/React.createElement("canvas", {
          className: "handwriting-drawboard",
          ref: function ref(drawboard) {
            return _this4.drawboard = drawboard;
          }
        })), /*#__PURE__*/React.createElement("ul", {
          className: "handwriting-action"
        }, ['icon-keyboard', 'icon-delete', 'Confirmar'].map(function (key) {
          var iconName = key.indexOf('icon') > -1 && key;
          return /*#__PURE__*/React.createElement("li", {
            key: key,
            className: "action-item",
            onClick: _this4.handlePressKey.bind(_this4, key)
          }, iconName ? /*#__PURE__*/React.createElement("i", {
            className: 'iconfont ' + iconName
          }) : key);
        }))), /*#__PURE__*/React.createElement("ul", {
          className: classnames({
            'content-item': true,
            letter: true,
            active: keyboardType === 1
          })
        }, letters.map(function (line, index) {
          return /*#__PURE__*/React.createElement("li", {
            key: index,
            className: "letter-line"
          }, line.map(function (word, index) {
            var key = word.split(' ')[0];
            var iconName = key.indexOf('icon') > -1 && key;
            var secondaryClass = word.split(' ')[1];
            return /*#__PURE__*/React.createElement("span", {
              key: key,
              className: "letter-cell".concat(secondaryClass ? ' ' + secondaryClass : ''),
              onClick: _this4.handlePressKey.bind(_this4, key)
            }, iconName ? /*#__PURE__*/React.createElement("i", {
              className: 'iconfont ' + iconName
            }) : key);
          }));
        })), /*#__PURE__*/React.createElement("ul", {
          className: classnames({
            'content-item': true,
            digital: true,
            active: keyboardType === 2
          })
        }, [['- dusky', '1', '2', '3', 'icon-keyboard dusky'], ['+ dusky', '4', '5', '6', 'icon-delete dusky'], ['/ dusky', '7', '8', '9', 'icon-space dusky'], ['~ dusky', '。 dusky', '0', ', dusky', 'Confirmar confirm']].map(function (line, index) {
          return /*#__PURE__*/React.createElement("li", {
            key: index,
            className: "digital-line"
          }, line.map(function (word, index) {
            var key = word.split(' ')[0];
            var iconName = key.indexOf('icon') > -1 && key;
            var secondaryClass = word.split(' ')[1];
            return /*#__PURE__*/React.createElement("span", {
              key: key,
              className: "digital-cell".concat(secondaryClass ? ' ' + secondaryClass : ''),
              onClick: _this4.handlePressKey.bind(_this4, key)
            }, iconName ? /*#__PURE__*/React.createElement("i", {
              className: 'iconfont ' + iconName
            }) : key);
          }));
        }))));
      }
    }]);

    return Keyboard;
  }(React.Component);

  var KeyboardAPI = /*#__PURE__*/function () {
    function KeyboardAPI() {
      _classCallCheck(this, KeyboardAPI);

      this.keyboardLayer = document.createElement('div');
      this.keyboardLayer.setAttribute('class', 'keyboard-layer');
      document.body.appendChild(this.keyboardLayer);
    }

    _createClass(KeyboardAPI, [{
      key: "show",
      value: function show(_ref) {
        var target = _ref.target,
            onChange = _ref.onChange;
        this.target = target; //将键盘渲染到body下的div.keyboard-layer键盘层

        ReactDOM.render( /*#__PURE__*/React.createElement(Keyboard, {
          target: target,
          onChange: onChange,
          onClose: this.close.bind(this)
        }), this.keyboardLayer);
      }
    }, {
      key: "close",
      value: function close(e) {
        var _this = this;

        //将键盘从键盘层卸载
        if ((!e || e.target !== this.target) && this.keyboardLayer.getElementsByClassName('keyboard').length > 0) {
          this.keyboardLayer.getElementsByClassName('keyboard')[0].setAttribute('class', 'keyboard');
          setTimeout(function () {
            ReactDOM.unmountComponentAtNode(_this.keyboardLayer);
          }, 250);
        }
      }
    }]);

    return KeyboardAPI;
  }();

  var index = new KeyboardAPI();

  return index;

})));
