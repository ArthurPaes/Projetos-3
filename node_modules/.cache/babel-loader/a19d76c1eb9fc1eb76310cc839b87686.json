{"ast":null,"code":"'use strict';\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n\n/**\r\n * CryptoJS core components.\r\n */\n\nvar CryptoJS = CryptoJS || function (Math, undefined) {\n  /**\r\n   * CryptoJS namespace.\r\n   */\n  var C = {};\n  /**\r\n   * Library namespace.\r\n   */\n\n  var C_lib = C.lib = {};\n  /**\r\n   * Base object for prototypal inheritance.\r\n   */\n\n  var Base = C_lib.Base = function () {\n    function F() {}\n\n    return {\n      /**\r\n       * Creates a new object that inherits from this object.\r\n       *\r\n       * @param {Object} overrides Properties to copy into the new object.\r\n       *\r\n       * @return {Object} The new object.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var MyType = CryptoJS.lib.Base.extend({\r\n       *         field: 'value',\r\n       *\r\n       *         method: function () {\r\n       *         }\r\n       *     });\r\n       */\n      extend: function extend(overrides) {\n        // Spawn\n        F.prototype = this;\n        var subtype = new F(); // Augment\n\n        if (overrides) {\n          subtype.mixIn(overrides);\n        } // Create default initializer\n\n\n        if (!subtype.hasOwnProperty('init')) {\n          subtype.init = function () {\n            subtype.$super.init.apply(this, arguments);\n          };\n        } // Initializer's prototype is the subtype object\n\n\n        subtype.init.prototype = subtype; // Reference supertype\n\n        subtype.$super = this;\n        return subtype;\n      },\n\n      /**\r\n       * Extends this object and runs the init method.\r\n       * Arguments to create() will be passed to init().\r\n       *\r\n       * @return {Object} The new object.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var instance = MyType.create();\r\n       */\n      create: function create() {\n        var instance = this.extend();\n        instance.init.apply(instance, arguments);\n        return instance;\n      },\n\n      /**\r\n       * Initializes a newly created object.\r\n       * Override this method to add some logic when your objects are created.\r\n       *\r\n       * @example\r\n       *\r\n       *     var MyType = CryptoJS.lib.Base.extend({\r\n       *         init: function () {\r\n       *             // ...\r\n       *         }\r\n       *     });\r\n       */\n      init: function init() {},\n\n      /**\r\n       * Copies properties into this object.\r\n       *\r\n       * @param {Object} properties The properties to mix in.\r\n       *\r\n       * @example\r\n       *\r\n       *     MyType.mixIn({\r\n       *         field: 'value'\r\n       *     });\r\n       */\n      mixIn: function mixIn(properties) {\n        for (var propertyName in properties) {\n          if (properties.hasOwnProperty(propertyName)) {\n            this[propertyName] = properties[propertyName];\n          }\n        } // IE won't copy toString using the loop above\n\n\n        if (properties.hasOwnProperty('toString')) {\n          this.toString = properties.toString;\n        }\n      },\n\n      /**\r\n       * Creates a copy of this object.\r\n       *\r\n       * @return {Object} The clone.\r\n       *\r\n       * @example\r\n       *\r\n       *     var clone = instance.clone();\r\n       */\n      clone: function clone() {\n        return this.init.prototype.extend(this);\n      }\n    };\n  }();\n  /**\r\n   * An array of 32-bit words.\r\n   *\r\n   * @property {Array} words The array of 32-bit words.\r\n   * @property {number} sigBytes The number of significant bytes in this word array.\r\n   */\n\n\n  var WordArray = C_lib.WordArray = Base.extend({\n    /**\r\n     * Initializes a newly created word array.\r\n     *\r\n     * @param {Array} words (Optional) An array of 32-bit words.\r\n     * @param {number} sigBytes (Optional) The number of significant bytes in the words.\r\n     *\r\n     * @example\r\n     *\r\n     *     var wordArray = CryptoJS.lib.WordArray.create();\r\n     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\r\n     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\r\n     */\n    init: function init(words, sigBytes) {\n      words = this.words = words || [];\n\n      if (sigBytes != undefined) {\n        this.sigBytes = sigBytes;\n      } else {\n        this.sigBytes = words.length * 4;\n      }\n    },\n\n    /**\r\n     * Converts this word array to a string.\r\n     *\r\n     * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\r\n     *\r\n     * @return {string} The stringified word array.\r\n     *\r\n     * @example\r\n     *\r\n     *     var string = wordArray + '';\r\n     *     var string = wordArray.toString();\r\n     *     var string = wordArray.toString(CryptoJS.enc.Utf8);\r\n     */\n    toString: function toString(encoder) {\n      return (encoder || Hex).stringify(this);\n    },\n\n    /**\r\n     * Concatenates a word array to this word array.\r\n     *\r\n     * @param {WordArray} wordArray The word array to append.\r\n     *\r\n     * @return {WordArray} This word array.\r\n     *\r\n     * @example\r\n     *\r\n     *     wordArray1.concat(wordArray2);\r\n     */\n    concat: function concat(wordArray) {\n      // Shortcuts\n      var thisWords = this.words;\n      var thatWords = wordArray.words;\n      var thisSigBytes = this.sigBytes;\n      var thatSigBytes = wordArray.sigBytes; // Clamp excess bits\n\n      this.clamp(); // Concat\n\n      if (thisSigBytes % 4) {\n        // Copy one byte at a time\n        for (var i = 0; i < thatSigBytes; i++) {\n          var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;\n        }\n      } else if (thatWords.length > 0xffff) {\n        // Copy one word at a time\n        for (var i = 0; i < thatSigBytes; i += 4) {\n          thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];\n        }\n      } else {\n        // Copy all words at once\n        thisWords.push.apply(thisWords, thatWords);\n      }\n\n      this.sigBytes += thatSigBytes; // Chainable\n\n      return this;\n    },\n\n    /**\r\n     * Removes insignificant bits.\r\n     *\r\n     * @example\r\n     *\r\n     *     wordArray.clamp();\r\n     */\n    clamp: function clamp() {\n      // Shortcuts\n      var words = this.words;\n      var sigBytes = this.sigBytes; // Clamp\n\n      words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;\n      words.length = Math.ceil(sigBytes / 4);\n    },\n\n    /**\r\n     * Creates a copy of this word array.\r\n     *\r\n     * @return {WordArray} The clone.\r\n     *\r\n     * @example\r\n     *\r\n     *     var clone = wordArray.clone();\r\n     */\n    clone: function clone() {\n      var clone = Base.clone.call(this);\n      clone.words = this.words.slice(0);\n      return clone;\n    },\n\n    /**\r\n     * Creates a word array filled with random bytes.\r\n     *\r\n     * @param {number} nBytes The number of random bytes to generate.\r\n     *\r\n     * @return {WordArray} The random word array.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var wordArray = CryptoJS.lib.WordArray.random(16);\r\n     */\n    random: function random(nBytes) {\n      var words = [];\n\n      for (var i = 0; i < nBytes; i += 4) {\n        words.push(Math.random() * 0x100000000 | 0);\n      }\n\n      return new WordArray.init(words, nBytes);\n    }\n  });\n  /**\r\n   * Encoder namespace.\r\n   */\n\n  var C_enc = C.enc = {};\n  /**\r\n   * Hex encoding strategy.\r\n   */\n\n  var Hex = C_enc.Hex = {\n    /**\r\n     * Converts a word array to a hex string.\r\n     *\r\n     * @param {WordArray} wordArray The word array.\r\n     *\r\n     * @return {string} The hex string.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\r\n     */\n    stringify: function stringify(wordArray) {\n      // Shortcuts\n      var words = wordArray.words;\n      var sigBytes = wordArray.sigBytes; // Convert\n\n      var hexChars = [];\n\n      for (var i = 0; i < sigBytes; i++) {\n        var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n        hexChars.push((bite >>> 4).toString(16));\n        hexChars.push((bite & 0x0f).toString(16));\n      }\n\n      return hexChars.join('');\n    },\n\n    /**\r\n     * Converts a hex string to a word array.\r\n     *\r\n     * @param {string} hexStr The hex string.\r\n     *\r\n     * @return {WordArray} The word array.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\r\n     */\n    parse: function parse(hexStr) {\n      // Shortcut\n      var hexStrLength = hexStr.length; // Convert\n\n      var words = [];\n\n      for (var i = 0; i < hexStrLength; i += 2) {\n        words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;\n      }\n\n      return new WordArray.init(words, hexStrLength / 2);\n    }\n  };\n  /**\r\n   * Latin1 encoding strategy.\r\n   */\n\n  var Latin1 = C_enc.Latin1 = {\n    /**\r\n     * Converts a word array to a Latin1 string.\r\n     *\r\n     * @param {WordArray} wordArray The word array.\r\n     *\r\n     * @return {string} The Latin1 string.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\r\n     */\n    stringify: function stringify(wordArray) {\n      // Shortcuts\n      var words = wordArray.words;\n      var sigBytes = wordArray.sigBytes; // Convert\n\n      var latin1Chars = [];\n\n      for (var i = 0; i < sigBytes; i++) {\n        var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n        latin1Chars.push(String.fromCharCode(bite));\n      }\n\n      return latin1Chars.join('');\n    },\n\n    /**\r\n     * Converts a Latin1 string to a word array.\r\n     *\r\n     * @param {string} latin1Str The Latin1 string.\r\n     *\r\n     * @return {WordArray} The word array.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\r\n     */\n    parse: function parse(latin1Str) {\n      // Shortcut\n      var latin1StrLength = latin1Str.length; // Convert\n\n      var words = [];\n\n      for (var i = 0; i < latin1StrLength; i++) {\n        words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;\n      }\n\n      return new WordArray.init(words, latin1StrLength);\n    }\n  };\n  /**\r\n   * UTF-8 encoding strategy.\r\n   */\n\n  var Utf8 = C_enc.Utf8 = {\n    /**\r\n     * Converts a word array to a UTF-8 string.\r\n     *\r\n     * @param {WordArray} wordArray The word array.\r\n     *\r\n     * @return {string} The UTF-8 string.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\r\n     */\n    stringify: function stringify(wordArray) {\n      try {\n        return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n      } catch (e) {\n        throw new Error('Malformed UTF-8 data');\n      }\n    },\n\n    /**\r\n     * Converts a UTF-8 string to a word array.\r\n     *\r\n     * @param {string} utf8Str The UTF-8 string.\r\n     *\r\n     * @return {WordArray} The word array.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\r\n     */\n    parse: function parse(utf8Str) {\n      return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n    }\n  };\n  /**\r\n   * Abstract buffered block algorithm template.\r\n   *\r\n   * The property blockSize must be implemented in a concrete subtype.\r\n   *\r\n   * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\r\n   */\n\n  var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n    /**\r\n     * Resets this block algorithm's data buffer to its initial state.\r\n     *\r\n     * @example\r\n     *\r\n     *     bufferedBlockAlgorithm.reset();\r\n     */\n    reset: function reset() {\n      // Initial values\n      this._data = new WordArray.init();\n      this._nDataBytes = 0;\n    },\n\n    /**\r\n     * Adds new data to this block algorithm's buffer.\r\n     *\r\n     * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\r\n     *\r\n     * @example\r\n     *\r\n     *     bufferedBlockAlgorithm._append('data');\r\n     *     bufferedBlockAlgorithm._append(wordArray);\r\n     */\n    _append: function _append(data) {\n      // Convert string to WordArray, else assume WordArray already\n      if (typeof data == 'string') {\n        data = Utf8.parse(data);\n      } // Append\n\n\n      this._data.concat(data);\n\n      this._nDataBytes += data.sigBytes;\n    },\n\n    /**\r\n     * Processes available data blocks.\r\n     *\r\n     * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\r\n     *\r\n     * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\r\n     *\r\n     * @return {WordArray} The processed data.\r\n     *\r\n     * @example\r\n     *\r\n     *     var processedData = bufferedBlockAlgorithm._process();\r\n     *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\r\n     */\n    _process: function _process(doFlush) {\n      // Shortcuts\n      var data = this._data;\n      var dataWords = data.words;\n      var dataSigBytes = data.sigBytes;\n      var blockSize = this.blockSize;\n      var blockSizeBytes = blockSize * 4; // Count blocks ready\n\n      var nBlocksReady = dataSigBytes / blockSizeBytes;\n\n      if (doFlush) {\n        // Round up to include partial blocks\n        nBlocksReady = Math.ceil(nBlocksReady);\n      } else {\n        // Round down to include only full blocks,\n        // less the number of blocks that must remain in the buffer\n        nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n      } // Count words ready\n\n\n      var nWordsReady = nBlocksReady * blockSize; // Count bytes ready\n\n      var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes); // Process blocks\n\n      if (nWordsReady) {\n        for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n          // Perform concrete-algorithm logic\n          this._doProcessBlock(dataWords, offset);\n        } // Remove processed words\n\n\n        var processedWords = dataWords.splice(0, nWordsReady);\n        data.sigBytes -= nBytesReady;\n      } // Return processed words\n\n\n      return new WordArray.init(processedWords, nBytesReady);\n    },\n\n    /**\r\n     * Creates a copy of this object.\r\n     *\r\n     * @return {Object} The clone.\r\n     *\r\n     * @example\r\n     *\r\n     *     var clone = bufferedBlockAlgorithm.clone();\r\n     */\n    clone: function clone() {\n      var clone = Base.clone.call(this);\n      clone._data = this._data.clone();\n      return clone;\n    },\n    _minBufferSize: 0\n  });\n  /**\r\n   * Abstract hasher template.\r\n   *\r\n   * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\r\n   */\n\n  var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n    /**\r\n     * Configuration options.\r\n     */\n    cfg: Base.extend(),\n\n    /**\r\n     * Initializes a newly created hasher.\r\n     *\r\n     * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\r\n     *\r\n     * @example\r\n     *\r\n     *     var hasher = CryptoJS.algo.SHA256.create();\r\n     */\n    init: function init(cfg) {\n      // Apply config defaults\n      this.cfg = this.cfg.extend(cfg); // Set initial values\n\n      this.reset();\n    },\n\n    /**\r\n     * Resets this hasher to its initial state.\r\n     *\r\n     * @example\r\n     *\r\n     *     hasher.reset();\r\n     */\n    reset: function reset() {\n      // Reset data buffer\n      BufferedBlockAlgorithm.reset.call(this); // Perform concrete-hasher logic\n\n      this._doReset();\n    },\n\n    /**\r\n     * Updates this hasher with a message.\r\n     *\r\n     * @param {WordArray|string} messageUpdate The message to append.\r\n     *\r\n     * @return {Hasher} This hasher.\r\n     *\r\n     * @example\r\n     *\r\n     *     hasher.update('message');\r\n     *     hasher.update(wordArray);\r\n     */\n    update: function update(messageUpdate) {\n      // Append\n      this._append(messageUpdate); // Update the hash\n\n\n      this._process(); // Chainable\n\n\n      return this;\n    },\n\n    /**\r\n     * Finalizes the hash computation.\r\n     * Note that the finalize operation is effectively a destructive, read-once operation.\r\n     *\r\n     * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n     *\r\n     * @return {WordArray} The hash.\r\n     *\r\n     * @example\r\n     *\r\n     *     var hash = hasher.finalize();\r\n     *     var hash = hasher.finalize('message');\r\n     *     var hash = hasher.finalize(wordArray);\r\n     */\n    finalize: function finalize(messageUpdate) {\n      // Final message update\n      if (messageUpdate) {\n        this._append(messageUpdate);\n      } // Perform concrete-hasher logic\n\n\n      var hash = this._doFinalize();\n\n      return hash;\n    },\n    blockSize: 512 / 32,\n\n    /**\r\n     * Creates a shortcut function to a hasher's object interface.\r\n     *\r\n     * @param {Hasher} hasher The hasher to create a helper for.\r\n     *\r\n     * @return {Function} The shortcut function.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\r\n     */\n    _createHelper: function _createHelper(hasher) {\n      return function (message, cfg) {\n        return new hasher.init(cfg).finalize(message);\n      };\n    },\n\n    /**\r\n     * Creates a shortcut function to the HMAC's object interface.\r\n     *\r\n     * @param {Hasher} hasher The hasher to use in this HMAC helper.\r\n     *\r\n     * @return {Function} The shortcut function.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\r\n     */\n    _createHmacHelper: function _createHmacHelper(hasher) {\n      return function (message, key) {\n        return new C_algo.HMAC.init(hasher, key).finalize(message);\n      };\n    }\n  });\n  /**\r\n   * Algorithm namespace.\r\n   */\n\n  var C_algo = C.algo = {};\n  return C;\n}(Math);\n\nmodule.exports = CryptoJS;","map":{"version":3,"sources":["/home/art/Desktop/VScripts/Projetos-3/src/react-handwriting-recognition/lib/ext/crypto/core.js"],"names":["CryptoJS","Math","undefined","C","C_lib","lib","Base","F","extend","overrides","prototype","subtype","mixIn","hasOwnProperty","init","$super","apply","arguments","create","instance","properties","propertyName","toString","clone","WordArray","words","sigBytes","length","encoder","Hex","stringify","concat","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","i","thatByte","push","ceil","call","slice","random","nBytes","C_enc","enc","hexChars","bite","join","parse","hexStr","hexStrLength","parseInt","substr","Latin1","latin1Chars","String","fromCharCode","latin1Str","latin1StrLength","charCodeAt","Utf8","decodeURIComponent","escape","e","Error","utf8Str","unescape","encodeURIComponent","BufferedBlockAlgorithm","reset","_data","_nDataBytes","_append","data","_process","doFlush","dataWords","dataSigBytes","blockSize","blockSizeBytes","nBlocksReady","max","_minBufferSize","nWordsReady","nBytesReady","min","offset","_doProcessBlock","processedWords","splice","Hasher","cfg","_doReset","update","messageUpdate","finalize","hash","_doFinalize","_createHelper","hasher","message","_createHmacHelper","key","C_algo","HMAC","algo","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n/**\r\n * CryptoJS core components.\r\n */\nvar CryptoJS = CryptoJS || (function (Math, undefined) {\n    /**\r\n     * CryptoJS namespace.\r\n     */\n    var C = {};\n\n    /**\r\n     * Library namespace.\r\n     */\n    var C_lib = C.lib = {};\n\n    /**\r\n     * Base object for prototypal inheritance.\r\n     */\n    var Base = C_lib.Base = (function () {\n        function F() {}\n\n        return {\n            /**\r\n             * Creates a new object that inherits from this object.\r\n             *\r\n             * @param {Object} overrides Properties to copy into the new object.\r\n             *\r\n             * @return {Object} The new object.\r\n             *\r\n             * @static\r\n             *\r\n             * @example\r\n             *\r\n             *     var MyType = CryptoJS.lib.Base.extend({\r\n             *         field: 'value',\r\n             *\r\n             *         method: function () {\r\n             *         }\r\n             *     });\r\n             */\n            extend: function extend(overrides) {\n                // Spawn\n                F.prototype = this;\n                var subtype = new F();\n\n                // Augment\n                if (overrides) {\n                    subtype.mixIn(overrides);\n                }\n\n                // Create default initializer\n                if (!subtype.hasOwnProperty('init')) {\n                    subtype.init = function () {\n                        subtype.$super.init.apply(this, arguments);\n                    };\n                }\n\n                // Initializer's prototype is the subtype object\n                subtype.init.prototype = subtype;\n\n                // Reference supertype\n                subtype.$super = this;\n\n                return subtype;\n            },\n\n            /**\r\n             * Extends this object and runs the init method.\r\n             * Arguments to create() will be passed to init().\r\n             *\r\n             * @return {Object} The new object.\r\n             *\r\n             * @static\r\n             *\r\n             * @example\r\n             *\r\n             *     var instance = MyType.create();\r\n             */\n            create: function create() {\n                var instance = this.extend();\n                instance.init.apply(instance, arguments);\n\n                return instance;\n            },\n\n            /**\r\n             * Initializes a newly created object.\r\n             * Override this method to add some logic when your objects are created.\r\n             *\r\n             * @example\r\n             *\r\n             *     var MyType = CryptoJS.lib.Base.extend({\r\n             *         init: function () {\r\n             *             // ...\r\n             *         }\r\n             *     });\r\n             */\n            init: function init() {},\n\n            /**\r\n             * Copies properties into this object.\r\n             *\r\n             * @param {Object} properties The properties to mix in.\r\n             *\r\n             * @example\r\n             *\r\n             *     MyType.mixIn({\r\n             *         field: 'value'\r\n             *     });\r\n             */\n            mixIn: function mixIn(properties) {\n                for (var propertyName in properties) {\n                    if (properties.hasOwnProperty(propertyName)) {\n                        this[propertyName] = properties[propertyName];\n                    }\n                }\n\n                // IE won't copy toString using the loop above\n                if (properties.hasOwnProperty('toString')) {\n                    this.toString = properties.toString;\n                }\n            },\n\n            /**\r\n             * Creates a copy of this object.\r\n             *\r\n             * @return {Object} The clone.\r\n             *\r\n             * @example\r\n             *\r\n             *     var clone = instance.clone();\r\n             */\n            clone: function clone() {\n                return this.init.prototype.extend(this);\n            }\n        };\n    })();\n\n    /**\r\n     * An array of 32-bit words.\r\n     *\r\n     * @property {Array} words The array of 32-bit words.\r\n     * @property {number} sigBytes The number of significant bytes in this word array.\r\n     */\n    var WordArray = C_lib.WordArray = Base.extend({\n        /**\r\n         * Initializes a newly created word array.\r\n         *\r\n         * @param {Array} words (Optional) An array of 32-bit words.\r\n         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.lib.WordArray.create();\r\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\r\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\r\n         */\n        init: function init(words, sigBytes) {\n            words = this.words = words || [];\n\n            if (sigBytes != undefined) {\n                this.sigBytes = sigBytes;\n            } else {\n                this.sigBytes = words.length * 4;\n            }\n        },\n\n        /**\r\n         * Converts this word array to a string.\r\n         *\r\n         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\r\n         *\r\n         * @return {string} The stringified word array.\r\n         *\r\n         * @example\r\n         *\r\n         *     var string = wordArray + '';\r\n         *     var string = wordArray.toString();\r\n         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\r\n         */\n        toString: function toString(encoder) {\n            return (encoder || Hex).stringify(this);\n        },\n\n        /**\r\n         * Concatenates a word array to this word array.\r\n         *\r\n         * @param {WordArray} wordArray The word array to append.\r\n         *\r\n         * @return {WordArray} This word array.\r\n         *\r\n         * @example\r\n         *\r\n         *     wordArray1.concat(wordArray2);\r\n         */\n        concat: function concat(wordArray) {\n            // Shortcuts\n            var thisWords = this.words;\n            var thatWords = wordArray.words;\n            var thisSigBytes = this.sigBytes;\n            var thatSigBytes = wordArray.sigBytes;\n\n            // Clamp excess bits\n            this.clamp();\n\n            // Concat\n            if (thisSigBytes % 4) {\n                // Copy one byte at a time\n                for (var i = 0; i < thatSigBytes; i++) {\n                    var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n                    thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;\n                }\n            } else if (thatWords.length > 0xffff) {\n                // Copy one word at a time\n                for (var i = 0; i < thatSigBytes; i += 4) {\n                    thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];\n                }\n            } else {\n                // Copy all words at once\n                thisWords.push.apply(thisWords, thatWords);\n            }\n            this.sigBytes += thatSigBytes;\n\n            // Chainable\n            return this;\n        },\n\n        /**\r\n         * Removes insignificant bits.\r\n         *\r\n         * @example\r\n         *\r\n         *     wordArray.clamp();\r\n         */\n        clamp: function clamp() {\n            // Shortcuts\n            var words = this.words;\n            var sigBytes = this.sigBytes;\n\n            // Clamp\n            words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;\n            words.length = Math.ceil(sigBytes / 4);\n        },\n\n        /**\r\n         * Creates a copy of this word array.\r\n         *\r\n         * @return {WordArray} The clone.\r\n         *\r\n         * @example\r\n         *\r\n         *     var clone = wordArray.clone();\r\n         */\n        clone: function clone() {\n            var clone = Base.clone.call(this);\n            clone.words = this.words.slice(0);\n\n            return clone;\n        },\n\n        /**\r\n         * Creates a word array filled with random bytes.\r\n         *\r\n         * @param {number} nBytes The number of random bytes to generate.\r\n         *\r\n         * @return {WordArray} The random word array.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.lib.WordArray.random(16);\r\n         */\n        random: function random(nBytes) {\n            var words = [];\n            for (var i = 0; i < nBytes; i += 4) {\n                words.push(Math.random() * 0x100000000 | 0);\n            }\n\n            return new WordArray.init(words, nBytes);\n        }\n    });\n\n    /**\r\n     * Encoder namespace.\r\n     */\n    var C_enc = C.enc = {};\n\n    /**\r\n     * Hex encoding strategy.\r\n     */\n    var Hex = C_enc.Hex = {\n        /**\r\n         * Converts a word array to a hex string.\r\n         *\r\n         * @param {WordArray} wordArray The word array.\r\n         *\r\n         * @return {string} The hex string.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\r\n         */\n        stringify: function stringify(wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var hexChars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n                hexChars.push((bite >>> 4).toString(16));\n                hexChars.push((bite & 0x0f).toString(16));\n            }\n\n            return hexChars.join('');\n        },\n\n        /**\r\n         * Converts a hex string to a word array.\r\n         *\r\n         * @param {string} hexStr The hex string.\r\n         *\r\n         * @return {WordArray} The word array.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\r\n         */\n        parse: function parse(hexStr) {\n            // Shortcut\n            var hexStrLength = hexStr.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < hexStrLength; i += 2) {\n                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;\n            }\n\n            return new WordArray.init(words, hexStrLength / 2);\n        }\n    };\n\n    /**\r\n     * Latin1 encoding strategy.\r\n     */\n    var Latin1 = C_enc.Latin1 = {\n        /**\r\n         * Converts a word array to a Latin1 string.\r\n         *\r\n         * @param {WordArray} wordArray The word array.\r\n         *\r\n         * @return {string} The Latin1 string.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\r\n         */\n        stringify: function stringify(wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var latin1Chars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n                latin1Chars.push(String.fromCharCode(bite));\n            }\n\n            return latin1Chars.join('');\n        },\n\n        /**\r\n         * Converts a Latin1 string to a word array.\r\n         *\r\n         * @param {string} latin1Str The Latin1 string.\r\n         *\r\n         * @return {WordArray} The word array.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\r\n         */\n        parse: function parse(latin1Str) {\n            // Shortcut\n            var latin1StrLength = latin1Str.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < latin1StrLength; i++) {\n                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;\n            }\n\n            return new WordArray.init(words, latin1StrLength);\n        }\n    };\n\n    /**\r\n     * UTF-8 encoding strategy.\r\n     */\n    var Utf8 = C_enc.Utf8 = {\n        /**\r\n         * Converts a word array to a UTF-8 string.\r\n         *\r\n         * @param {WordArray} wordArray The word array.\r\n         *\r\n         * @return {string} The UTF-8 string.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\r\n         */\n        stringify: function stringify(wordArray) {\n            try {\n                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n            } catch (e) {\n                throw new Error('Malformed UTF-8 data');\n            }\n        },\n\n        /**\r\n         * Converts a UTF-8 string to a word array.\r\n         *\r\n         * @param {string} utf8Str The UTF-8 string.\r\n         *\r\n         * @return {WordArray} The word array.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\r\n         */\n        parse: function parse(utf8Str) {\n            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n        }\n    };\n\n    /**\r\n     * Abstract buffered block algorithm template.\r\n     *\r\n     * The property blockSize must be implemented in a concrete subtype.\r\n     *\r\n     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\r\n     */\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n        /**\r\n         * Resets this block algorithm's data buffer to its initial state.\r\n         *\r\n         * @example\r\n         *\r\n         *     bufferedBlockAlgorithm.reset();\r\n         */\n        reset: function reset() {\n            // Initial values\n            this._data = new WordArray.init();\n            this._nDataBytes = 0;\n        },\n\n        /**\r\n         * Adds new data to this block algorithm's buffer.\r\n         *\r\n         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\r\n         *\r\n         * @example\r\n         *\r\n         *     bufferedBlockAlgorithm._append('data');\r\n         *     bufferedBlockAlgorithm._append(wordArray);\r\n         */\n        _append: function _append(data) {\n            // Convert string to WordArray, else assume WordArray already\n            if (typeof data == 'string') {\n                data = Utf8.parse(data);\n            }\n\n            // Append\n            this._data.concat(data);\n            this._nDataBytes += data.sigBytes;\n        },\n\n        /**\r\n         * Processes available data blocks.\r\n         *\r\n         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\r\n         *\r\n         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\r\n         *\r\n         * @return {WordArray} The processed data.\r\n         *\r\n         * @example\r\n         *\r\n         *     var processedData = bufferedBlockAlgorithm._process();\r\n         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\r\n         */\n        _process: function _process(doFlush) {\n            // Shortcuts\n            var data = this._data;\n            var dataWords = data.words;\n            var dataSigBytes = data.sigBytes;\n            var blockSize = this.blockSize;\n            var blockSizeBytes = blockSize * 4;\n\n            // Count blocks ready\n            var nBlocksReady = dataSigBytes / blockSizeBytes;\n            if (doFlush) {\n                // Round up to include partial blocks\n                nBlocksReady = Math.ceil(nBlocksReady);\n            } else {\n                // Round down to include only full blocks,\n                // less the number of blocks that must remain in the buffer\n                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n            }\n\n            // Count words ready\n            var nWordsReady = nBlocksReady * blockSize;\n\n            // Count bytes ready\n            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n            // Process blocks\n            if (nWordsReady) {\n                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n                    // Perform concrete-algorithm logic\n                    this._doProcessBlock(dataWords, offset);\n                }\n\n                // Remove processed words\n                var processedWords = dataWords.splice(0, nWordsReady);\n                data.sigBytes -= nBytesReady;\n            }\n\n            // Return processed words\n            return new WordArray.init(processedWords, nBytesReady);\n        },\n\n        /**\r\n         * Creates a copy of this object.\r\n         *\r\n         * @return {Object} The clone.\r\n         *\r\n         * @example\r\n         *\r\n         *     var clone = bufferedBlockAlgorithm.clone();\r\n         */\n        clone: function clone() {\n            var clone = Base.clone.call(this);\n            clone._data = this._data.clone();\n\n            return clone;\n        },\n\n        _minBufferSize: 0\n    });\n\n    /**\r\n     * Abstract hasher template.\r\n     *\r\n     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\r\n     */\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n        /**\r\n         * Configuration options.\r\n         */\n        cfg: Base.extend(),\n\n        /**\r\n         * Initializes a newly created hasher.\r\n         *\r\n         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\r\n         *\r\n         * @example\r\n         *\r\n         *     var hasher = CryptoJS.algo.SHA256.create();\r\n         */\n        init: function init(cfg) {\n            // Apply config defaults\n            this.cfg = this.cfg.extend(cfg);\n\n            // Set initial values\n            this.reset();\n        },\n\n        /**\r\n         * Resets this hasher to its initial state.\r\n         *\r\n         * @example\r\n         *\r\n         *     hasher.reset();\r\n         */\n        reset: function reset() {\n            // Reset data buffer\n            BufferedBlockAlgorithm.reset.call(this);\n\n            // Perform concrete-hasher logic\n            this._doReset();\n        },\n\n        /**\r\n         * Updates this hasher with a message.\r\n         *\r\n         * @param {WordArray|string} messageUpdate The message to append.\r\n         *\r\n         * @return {Hasher} This hasher.\r\n         *\r\n         * @example\r\n         *\r\n         *     hasher.update('message');\r\n         *     hasher.update(wordArray);\r\n         */\n        update: function update(messageUpdate) {\n            // Append\n            this._append(messageUpdate);\n\n            // Update the hash\n            this._process();\n\n            // Chainable\n            return this;\n        },\n\n        /**\r\n         * Finalizes the hash computation.\r\n         * Note that the finalize operation is effectively a destructive, read-once operation.\r\n         *\r\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n         *\r\n         * @return {WordArray} The hash.\r\n         *\r\n         * @example\r\n         *\r\n         *     var hash = hasher.finalize();\r\n         *     var hash = hasher.finalize('message');\r\n         *     var hash = hasher.finalize(wordArray);\r\n         */\n        finalize: function finalize(messageUpdate) {\n            // Final message update\n            if (messageUpdate) {\n                this._append(messageUpdate);\n            }\n\n            // Perform concrete-hasher logic\n            var hash = this._doFinalize();\n\n            return hash;\n        },\n\n        blockSize: 512 / 32,\n\n        /**\r\n         * Creates a shortcut function to a hasher's object interface.\r\n         *\r\n         * @param {Hasher} hasher The hasher to create a helper for.\r\n         *\r\n         * @return {Function} The shortcut function.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\r\n         */\n        _createHelper: function _createHelper(hasher) {\n            return function (message, cfg) {\n                return new hasher.init(cfg).finalize(message);\n            };\n        },\n\n        /**\r\n         * Creates a shortcut function to the HMAC's object interface.\r\n         *\r\n         * @param {Hasher} hasher The hasher to use in this HMAC helper.\r\n         *\r\n         * @return {Function} The shortcut function.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\r\n         */\n        _createHmacHelper: function _createHmacHelper(hasher) {\n            return function (message, key) {\n                return new C_algo.HMAC.init(hasher, key).finalize(message);\n            };\n        }\n    });\n\n    /**\r\n     * Algorithm namespace.\r\n     */\n    var C_algo = C.algo = {};\n\n    return C;\n})(Math);\n\nmodule.exports = CryptoJS;"]},"metadata":{},"sourceType":"module"}