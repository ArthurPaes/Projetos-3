{"ast":null,"code":"'use strict';\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n\nvar CryptoJS = require('./core');\n\n(function () {\n  // Shortcuts\n  var C = CryptoJS;\n  var C_lib = C.lib;\n  var Base = C_lib.Base;\n  var C_enc = C.enc;\n  var Utf8 = C_enc.Utf8;\n  var C_algo = C.algo;\n  /**\r\n   * HMAC algorithm.\r\n   */\n\n  var HMAC = C_algo.HMAC = Base.extend({\n    /**\r\n     * Initializes a newly created HMAC.\r\n     *\r\n     * @param {Hasher} hasher The hash algorithm to use.\r\n     * @param {WordArray|string} key The secret key.\r\n     *\r\n     * @example\r\n     *\r\n     *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\r\n     */\n    init: function init(hasher, key) {\n      // Init hasher\n      hasher = this._hasher = new hasher.init(); // Convert string to WordArray, else assume WordArray already\n\n      if (typeof key == 'string') {\n        key = Utf8.parse(key);\n      } // Shortcuts\n\n\n      var hasherBlockSize = hasher.blockSize;\n      var hasherBlockSizeBytes = hasherBlockSize * 4; // Allow arbitrary length keys\n\n      if (key.sigBytes > hasherBlockSizeBytes) {\n        key = hasher.finalize(key);\n      } // Clamp excess bits\n\n\n      key.clamp(); // Clone key for inner and outer pads\n\n      var oKey = this._oKey = key.clone();\n      var iKey = this._iKey = key.clone(); // Shortcuts\n\n      var oKeyWords = oKey.words;\n      var iKeyWords = iKey.words; // XOR keys with pad constants\n\n      for (var i = 0; i < hasherBlockSize; i++) {\n        oKeyWords[i] ^= 0x5c5c5c5c;\n        iKeyWords[i] ^= 0x36363636;\n      }\n\n      oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes; // Set initial values\n\n      this.reset();\n    },\n\n    /**\r\n     * Resets this HMAC to its initial state.\r\n     *\r\n     * @example\r\n     *\r\n     *     hmacHasher.reset();\r\n     */\n    reset: function reset() {\n      // Shortcut\n      var hasher = this._hasher; // Reset\n\n      hasher.reset();\n      hasher.update(this._iKey);\n    },\n\n    /**\r\n     * Updates this HMAC with a message.\r\n     *\r\n     * @param {WordArray|string} messageUpdate The message to append.\r\n     *\r\n     * @return {HMAC} This HMAC instance.\r\n     *\r\n     * @example\r\n     *\r\n     *     hmacHasher.update('message');\r\n     *     hmacHasher.update(wordArray);\r\n     */\n    update: function update(messageUpdate) {\n      this._hasher.update(messageUpdate); // Chainable\n\n\n      return this;\n    },\n\n    /**\r\n     * Finalizes the HMAC computation.\r\n     * Note that the finalize operation is effectively a destructive, read-once operation.\r\n     *\r\n     * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n     *\r\n     * @return {WordArray} The HMAC.\r\n     *\r\n     * @example\r\n     *\r\n     *     var hmac = hmacHasher.finalize();\r\n     *     var hmac = hmacHasher.finalize('message');\r\n     *     var hmac = hmacHasher.finalize(wordArray);\r\n     */\n    finalize: function finalize(messageUpdate) {\n      // Shortcut\n      var hasher = this._hasher; // Compute HMAC\n\n      var innerHash = hasher.finalize(messageUpdate);\n      hasher.reset();\n      var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n      return hmac;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/art/Desktop/VScripts/Projetos-3/src/react-handwriting-recognition/lib/ext/crypto/hmac.js"],"names":["CryptoJS","require","C","C_lib","lib","Base","C_enc","enc","Utf8","C_algo","algo","HMAC","extend","init","hasher","key","_hasher","parse","hasherBlockSize","blockSize","hasherBlockSizeBytes","sigBytes","finalize","clamp","oKey","_oKey","clone","iKey","_iKey","oKeyWords","words","iKeyWords","i","reset","update","messageUpdate","innerHash","hmac","concat"],"mappings":"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","sourcesContent":["'use strict';\n\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\nvar CryptoJS = require('./core');\n\n(function () {\n            // Shortcuts\n            var C = CryptoJS;\n            var C_lib = C.lib;\n            var Base = C_lib.Base;\n            var C_enc = C.enc;\n            var Utf8 = C_enc.Utf8;\n            var C_algo = C.algo;\n\n            /**\r\n             * HMAC algorithm.\r\n             */\n            var HMAC = C_algo.HMAC = Base.extend({\n                        /**\r\n                         * Initializes a newly created HMAC.\r\n                         *\r\n                         * @param {Hasher} hasher The hash algorithm to use.\r\n                         * @param {WordArray|string} key The secret key.\r\n                         *\r\n                         * @example\r\n                         *\r\n                         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\r\n                         */\n                        init: function init(hasher, key) {\n                                    // Init hasher\n                                    hasher = this._hasher = new hasher.init();\n\n                                    // Convert string to WordArray, else assume WordArray already\n                                    if (typeof key == 'string') {\n                                                key = Utf8.parse(key);\n                                    }\n\n                                    // Shortcuts\n                                    var hasherBlockSize = hasher.blockSize;\n                                    var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n                                    // Allow arbitrary length keys\n                                    if (key.sigBytes > hasherBlockSizeBytes) {\n                                                key = hasher.finalize(key);\n                                    }\n\n                                    // Clamp excess bits\n                                    key.clamp();\n\n                                    // Clone key for inner and outer pads\n                                    var oKey = this._oKey = key.clone();\n                                    var iKey = this._iKey = key.clone();\n\n                                    // Shortcuts\n                                    var oKeyWords = oKey.words;\n                                    var iKeyWords = iKey.words;\n\n                                    // XOR keys with pad constants\n                                    for (var i = 0; i < hasherBlockSize; i++) {\n                                                oKeyWords[i] ^= 0x5c5c5c5c;\n                                                iKeyWords[i] ^= 0x36363636;\n                                    }\n                                    oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n                                    // Set initial values\n                                    this.reset();\n                        },\n\n                        /**\r\n                         * Resets this HMAC to its initial state.\r\n                         *\r\n                         * @example\r\n                         *\r\n                         *     hmacHasher.reset();\r\n                         */\n                        reset: function reset() {\n                                    // Shortcut\n                                    var hasher = this._hasher;\n\n                                    // Reset\n                                    hasher.reset();\n                                    hasher.update(this._iKey);\n                        },\n\n                        /**\r\n                         * Updates this HMAC with a message.\r\n                         *\r\n                         * @param {WordArray|string} messageUpdate The message to append.\r\n                         *\r\n                         * @return {HMAC} This HMAC instance.\r\n                         *\r\n                         * @example\r\n                         *\r\n                         *     hmacHasher.update('message');\r\n                         *     hmacHasher.update(wordArray);\r\n                         */\n                        update: function update(messageUpdate) {\n                                    this._hasher.update(messageUpdate);\n\n                                    // Chainable\n                                    return this;\n                        },\n\n                        /**\r\n                         * Finalizes the HMAC computation.\r\n                         * Note that the finalize operation is effectively a destructive, read-once operation.\r\n                         *\r\n                         * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n                         *\r\n                         * @return {WordArray} The HMAC.\r\n                         *\r\n                         * @example\r\n                         *\r\n                         *     var hmac = hmacHasher.finalize();\r\n                         *     var hmac = hmacHasher.finalize('message');\r\n                         *     var hmac = hmacHasher.finalize(wordArray);\r\n                         */\n                        finalize: function finalize(messageUpdate) {\n                                    // Shortcut\n                                    var hasher = this._hasher;\n\n                                    // Compute HMAC\n                                    var innerHash = hasher.finalize(messageUpdate);\n                                    hasher.reset();\n                                    var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n                                    return hmac;\n                        }\n            });\n})();"]},"metadata":{},"sourceType":"module"}