{"ast":null,"code":"import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst SidebarContent = props => {\n  // const ref = useRef<any>();\n  // const [openDropDownArray, setOpenDropDownArray] = useState<string[]>([]);\n  // const activateParentDropdown = useCallback((item) => {\n  //   item.classList.add(\"active\");\n  //   const parent = item.parentElement;\n  //   const parent2El = parent.childNodes[1];\n  //   if (parent2El && parent2El.id !== \"side-menu\") {\n  //     parent2El.classList.add(\"mm-show\");\n  //   }\n  //   if (parent) {\n  //     parent.classList.add(\"mm-active\");\n  //     const parent2 = parent.parentElement;\n  //     if (parent2) {\n  //       parent2.classList.add(\"mm-show\"); // ul tag\n  //       const parent3 = parent2.parentElement; // li tag\n  //       if (parent3) {\n  //         parent3.classList.add(\"mm-active\"); // li\n  //         parent3.childNodes[0].classList.add(\"mm-active\"); //a\n  //         const parent4 = parent3.parentElement; // ul\n  //         if (parent4) {\n  //           parent4.classList.add(\"mm-show\"); // ul\n  //           const parent5 = parent4.parentElement;\n  //           if (parent5) {\n  //             parent5.classList.add(\"mm-show\"); // li\n  //             parent5.childNodes[0].classList.add(\"mm-active\"); // a tag\n  //           }\n  //         }\n  //       }\n  //     }\n  //     scrollElement(item);\n  //     return false;\n  //   }\n  //   scrollElement(item);\n  //   return false;\n  // }, []);\n  // // Use ComponentDidMount and ComponentDidUpdate method symultaniously\n  // useEffect(() => {\n  //   const pathName = props.location.pathname;\n  //   const initMenu = () => {\n  //     new MetisMenu(\"#side-menu\");\n  //     let matchingMenuItem = null;\n  //     const ul: any = document.getElementById(\"side-menu\");\n  //     const items = ul.getElementsByTagName(\"a\");\n  //     for (let i = 0; i < items.length; ++i) {\n  //       if (pathName === items[i].pathname) {\n  //         matchingMenuItem = items[i];\n  //         break;\n  //       }\n  //     }\n  //     if (matchingMenuItem) {\n  //       activateParentDropdown(matchingMenuItem);\n  //     }\n  //   };\n  //   initMenu();\n  // }, [props.location.pathname, activateParentDropdown]);\n  // useEffect(() => {\n  //   ref.current.recalculate();\n  // });\n  // function scrollElement(item: any) {\n  //   if (item) {\n  //     const currentPosition = item.offsetTop;\n  //     if (currentPosition > window.innerHeight) {\n  //       ref.current.getScrollElement().scrollTop = currentPosition - 300;\n  //     }\n  //   }\n  // }\n  // const handleToggle = (itemName: string) => {\n  //   const dropDownArray = Array.from(openDropDownArray);\n  //   if (dropDownArray.includes(itemName)) {\n  //     const index = dropDownArray.indexOf(itemName);\n  //     dropDownArray.splice(index, 1);\n  //   } else {\n  //     dropDownArray.push(itemName);\n  //   }\n  //   setOpenDropDownArray(dropDownArray);\n  // };\n  return /*#__PURE__*/React.createElement(React.Fragment, null) // <Drawer\n  //   // className={classes.drawer}\n  //   anchor=\"left\"\n  //   open={true}\n  //   // classes={{ paper: classes.drawerPaper }}\n  //   // onClose={() => dispatch(setIsMenuDrawerOpen(false))}\n  // >\n  //   <List disablePadding>aaaa a a a</List>\n  // </Drawer>\n  ;\n};\n\nSidebarContent.propTypes = {\n  location: PropTypes.object,\n  t: PropTypes.any\n};\nexport default withRouter(SidebarContent);","map":{"version":3,"sources":["/home/art/Desktop/VScripts/Projetos-3/src/components/Sidebar/Sidebar.tsx"],"names":["PropTypes","React","withRouter","SidebarContent","props","propTypes","location","object","t","any"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAgE,OAAhE;AAOA,SAASC,UAAT,QAA2B,kBAA3B;;AAcA,MAAMC,cAAc,GAAIC,KAAD,IAAgB;AACrC;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,sBACE,yCADF,CAEE;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAXF;AAaD,CAtGD;;AAwGAD,cAAc,CAACE,SAAf,GAA2B;AACzBC,EAAAA,QAAQ,EAAEN,SAAS,CAACO,MADK;AAEzBC,EAAAA,CAAC,EAAER,SAAS,CAACS;AAFY,CAA3B;AAKA,eAAeP,UAAU,CAACC,cAAD,CAAzB","sourcesContent":["import PropTypes from \"prop-types\";\nimport React, { useEffect, useRef, useCallback, useState } from \"react\";\n\nimport Icon from \"@ailibs/feather-react-ts\";\n\nimport SimpleBar from \"simplebar-react\";\n\nimport MetisMenu from \"metismenujs\";\nimport { withRouter } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Drawer,\n  IconButton,\n  Divider,\n  List,\n  ListItem,\n  ListItemIcon,\n  Collapse,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\n\nconst SidebarContent = (props: any) => {\n  // const ref = useRef<any>();\n\n  // const [openDropDownArray, setOpenDropDownArray] = useState<string[]>([]);\n\n  // const activateParentDropdown = useCallback((item) => {\n  //   item.classList.add(\"active\");\n  //   const parent = item.parentElement;\n  //   const parent2El = parent.childNodes[1];\n  //   if (parent2El && parent2El.id !== \"side-menu\") {\n  //     parent2El.classList.add(\"mm-show\");\n  //   }\n\n  //   if (parent) {\n  //     parent.classList.add(\"mm-active\");\n  //     const parent2 = parent.parentElement;\n\n  //     if (parent2) {\n  //       parent2.classList.add(\"mm-show\"); // ul tag\n\n  //       const parent3 = parent2.parentElement; // li tag\n\n  //       if (parent3) {\n  //         parent3.classList.add(\"mm-active\"); // li\n  //         parent3.childNodes[0].classList.add(\"mm-active\"); //a\n  //         const parent4 = parent3.parentElement; // ul\n  //         if (parent4) {\n  //           parent4.classList.add(\"mm-show\"); // ul\n  //           const parent5 = parent4.parentElement;\n  //           if (parent5) {\n  //             parent5.classList.add(\"mm-show\"); // li\n  //             parent5.childNodes[0].classList.add(\"mm-active\"); // a tag\n  //           }\n  //         }\n  //       }\n  //     }\n  //     scrollElement(item);\n  //     return false;\n  //   }\n  //   scrollElement(item);\n  //   return false;\n  // }, []);\n\n  // // Use ComponentDidMount and ComponentDidUpdate method symultaniously\n  // useEffect(() => {\n  //   const pathName = props.location.pathname;\n\n  //   const initMenu = () => {\n  //     new MetisMenu(\"#side-menu\");\n  //     let matchingMenuItem = null;\n  //     const ul: any = document.getElementById(\"side-menu\");\n  //     const items = ul.getElementsByTagName(\"a\");\n  //     for (let i = 0; i < items.length; ++i) {\n  //       if (pathName === items[i].pathname) {\n  //         matchingMenuItem = items[i];\n  //         break;\n  //       }\n  //     }\n  //     if (matchingMenuItem) {\n  //       activateParentDropdown(matchingMenuItem);\n  //     }\n  //   };\n  //   initMenu();\n  // }, [props.location.pathname, activateParentDropdown]);\n\n  // useEffect(() => {\n  //   ref.current.recalculate();\n  // });\n\n  // function scrollElement(item: any) {\n  //   if (item) {\n  //     const currentPosition = item.offsetTop;\n  //     if (currentPosition > window.innerHeight) {\n  //       ref.current.getScrollElement().scrollTop = currentPosition - 300;\n  //     }\n  //   }\n  // }\n\n  // const handleToggle = (itemName: string) => {\n  //   const dropDownArray = Array.from(openDropDownArray);\n  //   if (dropDownArray.includes(itemName)) {\n  //     const index = dropDownArray.indexOf(itemName);\n  //     dropDownArray.splice(index, 1);\n  //   } else {\n  //     dropDownArray.push(itemName);\n  //   }\n  //   setOpenDropDownArray(dropDownArray);\n  // };\n\n  return (\n    <></>\n    // <Drawer\n    //   // className={classes.drawer}\n    //   anchor=\"left\"\n    //   open={true}\n    //   // classes={{ paper: classes.drawerPaper }}\n    //   // onClose={() => dispatch(setIsMenuDrawerOpen(false))}\n    // >\n    \n    //   <List disablePadding>aaaa a a a</List>\n    // </Drawer>\n  );\n};\n\nSidebarContent.propTypes = {\n  location: PropTypes.object,\n  t: PropTypes.any,\n};\n\nexport default withRouter(SidebarContent);\n"]},"metadata":{},"sourceType":"module"}